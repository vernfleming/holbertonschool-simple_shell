.TH HSH 1 "April 2025" "hsh 1.0" "User Commands"
.SH NAME
hsh \- simple Unix command-line shell
.SH SYNOPSIS
.B hsh
.SH DESCRIPTION
.B hsh
is a simple Unix command-line interpreter, or shell, written in C. It provides a user interface for access to the services of the operating system by executing commands.

It mimics the behavior of
.BR /bin/sh ,
supports both interactive and non-interactive modes, and executes commands using the
.B execve
system call.

.SH FEATURES
.TP
\fBInteractive Mode\fR
Display a prompt and wait for user input line-by-line.
.TP
\fBNon-Interactive Mode\fR
Accept commands from standard input (e.g. via piping or file redirection).
.TP
\fBCommand Execution\fR
Searches the PATH for executables and runs them in child processes.
.TP
\fBBuilt-ins\fR
Supports the following built-in commands:
.RS
.TP
\fBexit\fR
Exit the shell with the status of the most recently executed command. If no commands were executed, exits with status 0.
.TP
\fBenv\fR
Print the current environment variables.
.RE
.TP
\fBError Handling\fR
Consistent with \fB/bin/sh\fR â€” error messages are prefixed with the value of \fBargv[0]\fR.

.SH ENVIRONMENT
.TP
.B PATH
Used to locate executable commands. The shell searches each directory in the PATH for the command.

.SH USAGE
.TP
\fBInteractive Example:\fR
.RS
$ ./hsh  
#cisfun$ ls  
file1 file2  
#cisfun$ env
USER=username
HOME=/home/username
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
#cisfun$ exit  
.RE
.TP
\fBNon-Interactive Example:\fR
.RS
$ echo "/bin/ls" | ./hsh  
file1 file2  
.RE

.SH EXIT STATUS
The exit status is the value returned by the last executed command:
.TP
.B 0
Success
.TP
.B 127
Command not found
.TP
.B Other values
As returned by the executed command

.SH SIGNAL HANDLING
The shell passes most signals to its child processes. Ctrl+C (SIGINT) will terminate the current foreground process but not the shell itself.

.SH FILES
.TP
.B /bin/sh
Reference shell implementation.
.TP
.B ./hsh
User-implemented shell binary.

.SH BUGS
This shell is for educational purposes and may not support advanced features such as:
- Pipes (`|`)
- Redirection (`>`, `<`)
- Chaining commands using `&&`, `||`
- Environment variable assignment or substitution


.SH AUTHOR
Written by Jarryd Barrah, Isaac Dillon and Jin Liu, for Holberton School.

.SH SEE ALSO
.BR sh (1),
.BR execve (2),
.BR fork (2),
.BR wait (2),
.BR getenv (3),
.BR strtok (3)

